Arrays
------

-> Introduction
---------------

List of elements of the same type placed in a contiguous memory location.


-> Arrays - Creation
--------------------

Operations in Arrays

Create
Input
Output
Update

Creating an array

dataType arrayName[] = new dataType[size];


public class ArraysCC {
    public static void main(String[] args) {
        
        int marks[] = new int[50];

        int numbers[] = {1,2,3}; // 3
    }
}



Arrays - Input, Output,Update
-----------------------------

import java.util.*;

public class ArraysCC {
    public static void main(String[] args) {
        
        int marks[] = new int[100];
        Scanner sc = new Scanner(System.in);

        marks[0] = sc.nextInt();  //phy
        marks[1] = sc.nextInt();  //chem
        marks[2] = sc.nextInt();  //math

        System.out.println("phy : "+marks[0]);
        System.out.println("chem : "+marks[1]);
        System.out.println("math : "+marks[2]);
        
        // marks[2] = marks[2] + 1;
        // System.out.println("math : "+marks[2]);

        int percentage = (marks[0]+marks[1]+marks[2]) / 3;
        System.out.println("Percentage: "+percentage+"%");

        System.out.println("length of array: "+marks.length);
    }
}


output:
98
87
84
phy : 98
chem : 87
math : 84
Percentage: 89%
length of array: 100


-> Arrays as function arguments
-------------------------------

import java.util.*;

public class ArraysCC {

    public static void update(int marks[],int nonChangable){
        nonChangable = 10;
        for(int i = 0;i<marks.length;i++){
            marks[i] = marks[i] + 1;
        }
    }
    public static void main(String[] args) {
        
        int marks[] = {97,98,99};
        int nonChangable = 5;
        update(marks,nonChangable);
        System.out.println(nonChangable);
        for(int i = 0;i<marks.length;i++){
            System.out.print(marks[i]+" ");
        }
    }
}


output:
5
98 99 100 


-> Linear Search
----------------

find the index of element in a given array


import java.util.*;

public class ArraysCC {

    public static int linearSearch(int numbers[],int key){
    
        for(int i = 0;i<numbers.length;i++){
            if(numbers[i] == key){
                return i;
            }
        }
        return -1;
    }
    public static void main(String[] args) {
        
        int numbers[] = {2,4,6,8,10,12,14,16,18};
        int key = 10;
        int index = linearSearch(numbers, key);
        if(index == -1){
            System.out.println("NOT found");
        }else{
            System.out.println("key is at index: "+index);
        }
        
    }
}


output:
key is at index: 4



-> Largest in Array
-------------------

find the largest number in a given array

import java.util.*;

public class ArraysCC {

    public static int getLargestAndSmallest(int numbers[]){
    
        int largest = Integer.MIN_VALUE;
        int smallest = Integer.MAX_VALUE;

        for(int i = 0;i<numbers.length;i++){
            if(largest < numbers[i]){
                largest = numbers[i];
            }
            if(smallest > numbers[i]){
                smallest = numbers[i];
            }
        }
        System.out.println("smallest value is: "+smallest);
        return largest;
    }
    public static void main(String[] args) {
        
        int numbers[] = {1,2,6,3,5};
        System.out.println("largest value is: "+getLargestAndSmallest(numbers));
        
    }
}


output:
smallest value is: 1
largest value is: 6



-> Binary Search
----------------

prerequisite - sorted arrays


import java.util.*;

public class ArraysCC {

    public static int binarySearch(int numbers[],int key){

        int start = 0;
        int end = numbers.length-1;

        while(start <= end){

            int mid = (start+end)/2;

            //comparisions
            if(key == numbers[mid]){
                return mid;
            }
            if(numbers[mid] < key){ //right
                start = mid + 1;
            }else{ //left
                end = mid - 1;
            }
        }
        return -1;
    }
    
    public static void main(String[] args) {
        
        int numbers[] = {2,4,6,8,10,12,14};
        int key = 10;
        System.out.println("index for key is: "+binarySearch(numbers, key));
        
    }
}


output:
index for key is: 4



-> Reverse an Array
-------------------

import java.util.*;

public class ArraysCC {

    public static void reverse(int numbers[]){

        int first = 0;
        int last = numbers.length-1;

        while(first < last){

            //swap
            int temp = numbers[first];
            numbers[first] = numbers[last];
            numbers[last] = temp;

            first++;
            last--;
        }
        
    }
    
    public static void main(String[] args) {
        
        int numbers[] = {2,4,6,8,10};
        reverse(numbers);

        //print
        for(int i = 0;i< numbers.length;i++){
            System.out.print(numbers[i]+" ");
        }
        
    }
}


output:
10 8 6 4 2 



-> Pairs in Array
-----------------

import java.util.*;

public class ArraysCC {

    public static void printPairs(int numbers[]){

        int tp = 0;
        for(int i = 0;i < numbers.length;i++){
            int curr = numbers[i];
            for(int j = i+1;j < numbers.length;j++){
                System.out.print("("+curr+","+numbers[j]+") ");
                tp++;
            }
            System.out.println();
        }
        System.out.println("total pairs = "+tp);
        
    }
    
    public static void main(String[] args) {
        
        int numbers[] = {2,4,6,8,10};
        printPairs(numbers);
        
    }
}


output:
(2,4) (2,6) (2,8) (2,10) 
(4,6) (4,8) (4,10)
(6,8) (6,10)
(8,10)

total pairs = 10




-> Print Subarrays
------------------

a continuous part of array

import java.util.*;

public class ArraysCC {

    public static void printSubarrays(int numbers[]){
        
        int ts = 0;
        for(int i = 0;i < numbers.length;i++){
            int start = i;
            for(int j = i; j < numbers.length;j++){
                int end = j;
                for(int k = start;k<= end;k++){
                    System.out.print(numbers[k]+" ");
                }
                ts++;
                System.out.println();
            }
            System.out.println();
        }
        System.out.println("total subarrays = "+ts);
    }
    
    public static void main(String[] args) {
        
        int numbers[] = {2,4,6,8,10};
        printSubarrays(numbers);
        
    }
}



output:
2 
2 4
2 4 6
2 4 6 8
2 4 6 8 10

4
4 6
4 6 8
4 6 8 10

6
6 8
6 8 10

8
8 10

10

total subarrays = 15



subarrays sum find min and max sum


import java.util.*;

public class ArraysCC {

    public static void printSubarrays(int numbers[]){

        for(int i = 0;i < numbers.length;i++){
            int min = Integer.MAX_VALUE;
            int max = Integer.MIN_VALUE;

            int start = i;
            for(int j = i; j < numbers.length;j++){
                int end = j;
                int sum = 0;
        
                for(int k = start;k<= end;k++){
                    sum+=numbers[k];
                }
                if(sum < min){
                    min = Math.min(sum,min);
                }
                if(sum > max){
                    max = Math.max(sum,max);
                }
            }
            System.out.println("Min sum = "+min);
            System.out.println("Max sum = "+max);
            System.out.println();
        }
    }
    
    public static void main(String[] args) {
        
        int numbers[] = {2,4,6,8,10};
        printSubarrays(numbers);
        
    }
}

output:
Min sum = 2
Max sum = 30

Min sum = 4
Max sum = 28

Min sum = 6
Max sum = 24

Min sum = 8
Max sum = 18

Min sum = 10
Max sum = 10


-> Max Subarray Sum - I (Brute Force)
-------------------------------------

import java.util.*;

public class ArraysCC {

    public static void maxSubarraySum(int numbers[]){

        int curSum = 0;
        int maxSum = Integer.MIN_VALUE;

        for(int i = 0;i < numbers.length;i++){

            int start = i;
            for(int j = i; j < numbers.length;j++){
                int end = j;
                curSum = 0;
                for(int k = start;k<= end;k++){
                    curSum+=numbers[k];
                }
                if(curSum > maxSum){
                    maxSum = curSum;
                }
            }
        }
        System.out.println("max sum = "+maxSum);
    }
    
    public static void main(String[] args) {
        
        int numbers[] = {1,-2,6,-1,3};
        maxSubarraySum(numbers);
        
    }
}


output:
max sum = 8



-> Max Subarray Sum - II (Prefix Sum)
-------------------------------------

import java.util.*;

public class ArraysCC {

    public static void maxSubarraySum(int numbers[]){

        int curSum = 0;
        int maxSum = Integer.MIN_VALUE;
        int prefix[] = new int[numbers.length];

        prefix[0] = numbers[0];

        //calculate prefix array
        for(int i=1;i<prefix.length;i++){
            prefix[i] = prefix[i-1] + numbers[i];
        }

        for(int i = 0;i < numbers.length;i++){

            int start = i;
            for(int j = i; j < numbers.length;j++){
                int end = j;
                curSum = start == 0 ? prefix[end] : prefix[end] - prefix[start-1];
                
                if(curSum > maxSum){
                    maxSum = curSum;
                }
            }
        }
        System.out.println("max sum = "+maxSum);
    }
    
    public static void main(String[] args) {
        
        int numbers[] = {1,-2,6,-1,3};
        maxSubarraySum(numbers);
        
    }
}



output:
max sum = 8



-> Max Subarray Sum - III (Kadane's Algorithm)
----------------------------------------------

import java.util.*;

public class ArraysCC {

    public static void kadanes(int numbers[]){
        int ms = Integer.MIN_VALUE;
        int cs = 0;

        for(int i=0;i<numbers.length;i++){
            cs = cs + numbers[i];
            if(cs < 0){
                cs = 0;
            }
            ms = Math.max(cs, ms);
        }
        System.out.println("our max subarray sum is: "+ms);
        
    }
    
    public static void main(String[] args) {
        
        int numbers[] = {-2, -3, 4, -1, -2, 1, 5, -3};
        kadanes(numbers);
        
    }
}


output:
our max subarray sum is: 7



-> Trapping Rainwater
---------------------

import java.util.*;

public class ArraysCC {

    public static int trappedRainwater(int height[]){  // O(n)

        int n = height.length;
        //calculate left max bundary - array
        int leftMax[] = new int[n];
        leftMax[0] = height[0];
        for(int i = 1;i < n;i++){
            leftMax[i] = Math.max(height[i], leftMax[i-1]);
        }
        //calculate right max bundary - array
        int rightMax[] = new int[n];
        rightMax[n-1] = height[n-1];

        for(int i = n-2;i>=0;i--){
            rightMax[i] = Math.max(height[i], rightMax[i+1]);
        }

        int trappedWater = 0;
        //loop
        for(int i = 0;i < n;i++){
            //waterLevel = min(leftmax bound, rightmax bound)
            int waterLevel = Math.min(leftMax[i],rightMax[i]);
            //trapped water = waterLevel - height[i]
            trappedWater += waterLevel - height[i];
        }

        return trappedWater;
        
        
        
    }
    
    public static void main(String[] args) {
        
        int height[] = {4, 2, 0, 6, 3, 2, 5};
        System.out.println(trappedRainwater(height));
        
    }
}


output:
11


-> Best Time to Buy & Sell Stock
--------------------------------

import java.util.*;

public class ArraysCC {

    public static int buyAndSellStocks(int prices[]){  // O(n)

        int buyPrice = Integer.MAX_VALUE;
        int maxProfit = 0;

        for(int i=0;i<prices.length;i++){
            if(buyPrice < prices[i]){ // profit
                int profit = prices[i] - buyPrice; // today's profit
                maxProfit = Math.max(maxProfit,profit);
            }else{
                buyPrice = prices[i];
            }
        }
        return maxProfit;
    }
    
    public static void main(String[] args) {
        
        int prices[] = {7, 1, 5, 3, 6, 4}; 
        System.out.println(buyAndSellStocks(prices));
        
    }
}


output:
5


-------------------------------------------------------------------------------------------------------------------------