Patterns (Part II) - Advanced(Module - 7)
-----------------------------------------

-> Hollow Rectangle Pattern
---------------------------

import java.util.Scanner;

public class JavaBasics{

    public static void hollow_rectangle(int totRows, int totCols){
        //outer loop
        for(int i = 1; i <= totRows; i++){
            // inner loop - columns
            for(int j = 1; j <= totCols; j++){
                //cell - (i,j)
                if(i == 1 || i == totRows || j==1 || j==totCols){
                    System.out.print("*");
                }else{
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        hollow_rectangle(4, 5);
    }
}


output:
*****
*   *
*   *
*****



-> Inverted & Rotated Half Pyramid
----------------------------------


import java.util.Scanner;

public class JavaBasics{

    public static void inverted_rotated_half_pyramid(int n){

        //outer
        for(int i =1;i <= n;i++){

            //spaces
            for(int j = 1;j <= n-i;j++){
                System.out.print(" ");
            }
            //stars
            for(int j = 1;j <=i;j++){
                System.out.print("*");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        inverted_rotated_half_pyramid(4);
    }
}


output:
   *
  **
 ***
****



-> Inverted Half Pyramid Pattern with Numbers
---------------------------------------------


import java.util.Scanner;

public class JavaBasics{

    public static void inverted_half_pyramid_withNumbers(int n){
        //outer
        for(int i = 1;i <= n;i++){
            //inner - numbers
            for(int j = 1;j <=n-i+1;j++){
                System.out.print(j);
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        inverted_half_pyramid_withNumbers(5);
    }
}


output:
12345
1234
123
12
1



-> Floyd's Triangle Pattern
---------------------------


import java.util.Scanner;

public class JavaBasics{

    public static void floyds_triangle(int n){
        //outer
        int counter = 1;
        for(int i = 1;i <= n;i++){
            //inner - how many times will counter be printed
            for(int j = 1;j <=i;j++){
                System.out.print(counter+" ");
                counter++;
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        floyds_triangle(5);
    }
}


output:
1 
2 3
4 5 6
7 8 9 10
11 12 13 14 15



-> 0-1 Triangle Pattern
-----------------------


import java.util.Scanner;

public class JavaBasics{

    public static void zero_one_triangle(int n){
        for(int i = 1;i <= n;i++){
            for(int j = 1;j <= i;j++){
                if((i+j) % 2 == 0){
                    System.out.print("1");
                }else{
                    System.out.print("0");
                }
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        zero_one_triangle(5);
    }
}


output:
1
01
101
0101
10101



-> Butterfly Pattern
--------------------


import java.util.Scanner;

public class JavaBasics{

    public static void butterfly(int n){
        //1st half
        for(int i = 1;i <= n;i++){

            //stars = i
            for(int j = 1;j <= i;j++){
                System.out.print("*");
            }

            //spaces = 2*(n-i)
            for(int j = 1;j <= 2*(n-i);j++){
                System.out.print(" ");
            }

            //stars = i
            for(int j = 1;j <=i;j++){
                System.out.print("*");
            }
            System.out.println();
        }

        //2nd half
        for(int i = n;i >= 1;i--){
            //stars = i
            for(int j = 1;j <= i;j++){
                System.out.print("*");
            }

            //spaces = 2*(n-i)
            for(int j = 1;j <= 2*(n-i);j++){
                System.out.print(" ");
            }

            //stars = i
            for(int j = 1;j <=i;j++){
                System.out.print("*");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        butterfly(4);
    }
}


output:
*      *
**    **
***  ***
********
********
***  ***
**    **
*      *



-> Solid Rhombus Pattern
------------------------


import java.util.Scanner;

public class JavaBasics{

    public static void solid_rhombus(int n){

        for(int i = 1;i <= n;i++){

            //spaces
            for(int j = 1;j <= n-i;j++){
                System.out.print(" ");
            }
            //stars
            for(int j = 1;j <= n;j++){
                System.out.print("*");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        solid_rhombus(5);
    }
}


output:
    *****
   *****
  *****
 *****
*****



-> Hollow Rhombus Pattern
-------------------------


import java.util.Scanner;

public class JavaBasics{

    public static void hollow_rhombus(int n){
        for(int i = 1;i <= n;i++){
            //spaces
            for(int j = 1;j <= (n-i);j++){
                System.out.print(" ");
            }

            //hollow rectange - stars
            for(int j = 1; j <= n;j++){
                if(i == 1 || i == n || j == 1 || j == n){
                    System.out.print("*");
                }else{
                    System.out.print(" ");
                }
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        hollow_rhombus(5);
    }
}


output:

    *****
   *   *
  *   *
 *   *
*****



-> Diamond Pattern
------------------


import java.util.Scanner;

public class JavaBasics{

    public static void diamond(int n){

        //1st half
        for(int i = 1;i <= n;i++){

            //spaces
            for(int j = 1;j <= (n-i);j++){
                System.out.print(" ");
            }
            //stars
            for(int j = 1;j <= (2*i)-1;j++){
                System.out.print("*");
            }
            System.out.println();
        }


        //2nd half
        for(int i = n;i >= 1;i--){

            //spaces
            for(int j = 1;j <= (n-i);j++){
                System.out.print(" ");
            }
            //stars
            for(int j = 1;j <= (2*i)-1;j++){
                System.out.print("*");
            }
            System.out.println();
        }
    }

    public static void main(String[] args) {
        diamond(4);
    }
}


output:

   *
  ***
 *****
*******
*******
 *****
  ***
   *
   
   
   

-------------------------------------------------------------------------------------------------------------------------------------------


